name: Deploy to GitHub Pages

on:
  push:
    branches:
      - gh-pages  # Set this to your main branch
  workflow_dispatch:

permissions:
  contents: write  # This is crucial for allowing the action to push to your repository

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Debug - Show workspace contents
        run: |
          echo "Current workspace contents:"
          ls -la
          echo "Contents of root directory:"
          find . -maxdepth 1 -type f | sort

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Create Static Build
        run: |
          # Create a build directory
          mkdir -p build

          # Create .nojekyll file to disable Jekyll processing
          touch build/.nojekyll

          # Critical step: copy index.html and app.js to root of build
          echo "Copying static assets to build directory..."

          # Copy all relevant files with good error handling and verbose output
          echo "Copying index.html:"
          if [ -f index.html ]; then
            cp index.html build/
            echo "✅ Successfully copied index.html"
          else
            echo "❌ index.html not found in root directory!"

            # Creating a fallback index.html to ensure we have something
            echo "Creating fallback index.html..."
            echo '<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>HomieStay</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 0; padding: 0; line-height: 1.6; }
                    .container { max-width: 1100px; margin: 0 auto; padding: 20px; }
                    header { background: #4a89dc; color: white; text-align: center; padding: 1rem; }
                    .fallback-message { background: #f8f9fa; border: 1px solid #ddd; padding: 20px; margin-top: 20px; border-radius: 5px; }
                </style>
            </head>
            <body>
                <header>
                    <h1>Welcome to HomieStay</h1>
                </header>
                <div class="container">
                    <div class="fallback-message">
                        <h2>Site Under Development</h2>
                        <p>Our booking system is currently being set up. Please check back soon!</p>
                    </div>
                </div>
                <script>
                    console.log("HomieStay fallback page loaded");
                </script>
            </body>
            </html>' > build/index.html
            echo "✅ Created fallback index.html"
          fi

          # Copy styles.css
          echo "Copying styles.css:"
          if [ -f styles.css ]; then
            cp styles.css build/
            echo "✅ Successfully copied styles.css"
          else
            echo "⚠️ styles.css not found"
          fi

          # Ensure js directory exists
          mkdir -p build/js

          # Copy app.js
          echo "Copying app.js:"
          if [ -f js/app.js ]; then
            cp js/app.js build/js/
            echo "✅ Successfully copied app.js"
          else
            echo "❌ js/app.js not found!"

            # Create a minimal app.js file
            echo "Creating minimal app.js..."
            mkdir -p build/js
            echo 'console.log("HomieStay application loaded");
            document.addEventListener("DOMContentLoaded", function() {
                console.log("DOM fully loaded");
                const appContainer = document.getElementById("app");
                if (appContainer) {
                    appContainer.innerHTML = "<p>Welcome to HomieStay! Application is loading...</p>";
                }
            });' > build/js/app.js
            echo "✅ Created minimal app.js"
          fi

          # Copy any images
          echo "Copying images if they exist:"
          if [ -d "images" ]; then
            mkdir -p build/images
            cp -r images/* build/images/ || true
            echo "✅ Copied images directory"
          else
            echo "⚠️ No images directory found"
          fi

          # Copy any assets
          if [ -d "assets" ]; then
            mkdir -p build/assets
            cp -r assets/* build/assets/ || true
            echo "✅ Copied assets directory"
          fi

          # CRITICAL: Explicitly remove README.md if it exists in the build folder
          if [ -f build/README.md ]; then
            rm build/README.md
            echo "❌ Removed README.md from build folder"
          fi

          # List all files in build directory for verification
          echo "Final build directory contents:"
          find build -type f | sort

          echo "Verifying index.html exists in build directory:"
          if [ -f build/index.html ]; then
            echo "✅ index.html exists in build directory"
          else
            echo "❌ CRITICAL ERROR: index.html is missing from build directory!"
          fi

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build
          clean: true  # Removes any files in the branch not found in the build directory
          commit-message: "Deploy to GitHub Pages [skip ci]"